import random
from user304_rsf8mD0BOQ_1 import Vector
try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

WIDTH = 800
HEIGHT = 600

class Obstacle:
    def __init__(self, pos):
        self.pos = pos
        self.vel = Vector()
        self.radius = None
        self.IMG = None
        self.IMG_CENTRE = None
        self.IMG_DIMS = None
        self.img_dest_dim = None
        
    def draw(self, canvas):
        canvas.draw_image(self.IMG, self.IMG_CENTRE, self.IMG_DIMS, self.pos.get_p(), self.img_dest_dim)
        
class Moon(Obstacle): #MAIN PLAYER CLASS
    def __init__(self, pos):
        super().__init__(pos)
        self.IMG = simplegui.load_image('https://i.imgur.com/cuRu9OZ.png') #MOON
        self.IMG_CENTRE = (311, 294)
        self.IMG_DIMS = (622, 588)
        self.img_dest_dim = (100, 100)
        self.gravity = 0
        self.ALIVE = True
        self.radius = 50   
        
    def update(self):
        if self.ALIVE == True:
            self.pos.add(self.vel)
            self.vel.multiply(0.85)
            self.vel.add(Vector(0, (self.gravity)))
        #if self.ALIVE == False:
        #print("Your dead")
            
    def getPos(self):
        return self.pos.get_p()
    
    def offset_d(self):
        return self.pos.y - self.radius

class Planet(Obstacle):
    def __init__(self, pos):
        super().__init__(pos)
        self.IMG = simplegui.load_image('https://i.imgur.com/nh8zRKw.png') #PLANET
        self.IMG_CENTRE = (273/2, 188/2)
        self.IMG_DIMS = (273, 188)
        self.img_dest_dim = (140, 96)
        self.radius = 50

class Star(Obstacle):
    def __init__(self, pos):
        super().__init__(pos)
        self.IMG = simplegui.load_image('https://i.imgur.com/MsKwX7I.png ') #STAR
        self.IMG_CENTRE = (113/2, 112/2)
        self.IMG_DIMS = (113, 112)
        self.img_dest_dim = (46, 46)
        self.radius = 23
        
class Cloud(Obstacle):
    def __init__(self, pos):
        super().__init__(pos)
        self.IMG = simplegui.load_image('https://i.imgur.com/hLxKYTT.png') #CLOUD
        self.IMG_CENTRE = (250/2, 127/2)
        self.IMG_DIMS = (250, 127)
        self.img_dest_dim = (86, 46)
        self.radius = 25
        self.goLeft = True
        self.goRight = False
        self.level = 1
        
    def update(self):
        self.pos.add(self.vel)
        if self.pos.x <= 0:
            self.goLeft = False
            self.goRight = True
        if self.pos.x >= 800:
            self.goLeft = True
            self.goRight = False
        if self.goLeft:
            self.vel.multiply(0.25)
            self.vel.add(Vector(-self.level - 1, (0)))    
        if self.goRight:
            self.vel.multiply(0.25)
            self.vel.add(Vector(self.level + 1, (0)))
            
    def increaseDifficulty(self,i):
        self.level = i/
        
class Alien(Obstacle):
    def __init__(self, pos):
        super().__init__(pos)
        self.IMG = simplegui.load_image('https://i.imgur.com/8OwD4yc.png') #ALIEN
        self.IMG_CENTRE = (229/2, 172/2)
        self.IMG_DIMS = (229, 172)
        self.img_dest_dim = (88, 48)
        self.radius = 35 
        self.goLeft = True
        self.goRight = False
        self.level = 1
        
    def update(self):
        self.pos.add(self.vel)
        #self.vel.multiply(0.25)
        #self.vel.add(Vector(-1, (0)))
        if self.pos.x <= 0:
            self.goLeft = False
            self.goRight = True
        if self.pos.x >= 800:
            self.goLeft = True
            self.goRight = False
        if self.goLeft:
            self.vel.multiply(0.25)
            self.vel.add(Vector(-self.level - 5, (0)))    
        if self.goRight:
            self.vel.multiply(0.25)
            self.vel.add(Vector(self.level+ 5, (0)))
            
    def increaseDifficulty(self,i):
        self.level = i /2
        
class Asteroid(Obstacle):
    def __init__(self, pos):
        super().__init__(pos)
        self.IMG = simplegui.load_image('https://i.imgur.com/SBgHMg9.png') #ASTEROID
        self.IMG_CENTRE = (156/2, 147/2)
        self.IMG_DIMS = (156, 147)
        self.img_dest_dim = (68, 48)
        self.radius = 25
        self.angle = random.randrange(-5, 5)
        self.speed = random.randrange(2, 6)
        self.img_rot = 0
        self.STEP = 0.1
    def update(self):
        self.pos.add(self.vel)
        self.vel.multiply(0.25)
        self.vel.add(Vector(self.angle, (self.speed)))
# Drawing handler
    def draw(self,canvas):
        self.img_rot += self.STEP
        canvas.draw_image(self.IMG, self.IMG_CENTRE, self.IMG_DIMS, self.pos.get_p(), self.img_dest_dim, self.img_rot)
class Wall(Obstacle):
    def __init__(self, x, y, border, colour):
        self.y = y
        self.border = border
        self.colour = colour
        self.normal = Vector(1, 0)
        self.edge = y + border
        
    def draw(self, canvas):
        canvas.draw_line((0, self.y),
                         (WIDTH, self.y),
                         (2 * self.border + 1),
                         self.colour)
        
class Keyboard:
    def __init__(self):
        self.right = False
        self.left = False
        self.up = False
        self.down = False
        self.space = False
        self.m = False
        self.r = False
    def keyDown(self, key):
        if key == simplegui.KEY_MAP['right']:
            self.right = True
        if key == simplegui.KEY_MAP['left']:
            self.left = True
        if key == simplegui.KEY_MAP['up']:
            self.up = True
        if key == simplegui.KEY_MAP['space']:
            self.space = True
        if key == simplegui.KEY_MAP['M']:
            self.m = True
        if key == simplegui.KEY_MAP['R']:
            self.r = True
    def keyUp(self, key):
        if key == simplegui.KEY_MAP['right']:
            self.right = False
        if key == simplegui.KEY_MAP['left']:
            self.left = False
        if key == simplegui.KEY_MAP['up']:
            self.up = False
        if key == simplegui.KEY_MAP['space']:
            self.space = False
        if key == simplegui.KEY_MAP['R']:
            self.r = False    
class ObstacleHandler:
    def __init__(self):
        self.spawnobjects = False
        self.planetLimit = 1
        self.planets_list = [] 
        self.starLimit = 1
        self.star_list = []
        self.cloudLimit = 1
        self.cloud_list = []
        self.alienLimit = 1
        self.alien_list = []
        self.asteroidLimit = 2
        self.asteroid_list = []
        self.starRemoval = []
        self.lives = []
        self.walls = []
        
    def spawn_planets(self):
        for i in range(0, self.planetLimit):
            self.vectorPosition = Vector(random.randrange(170, 250), random.randrange(100, 500))
            self.newPlanet = Planet(self.vectorPosition)
            self.add_planet(self.newPlanet)
       
    def add_planet(self,i):
        self.planets_list.append(i)
        
    def spawn_stars(self):
        for i in range(0, self.starLimit):
            self.vectorPosition = Vector(random.randrange(100, 750), random.randrange(50, 550))
            self.newStar = Star(self.vectorPosition)
            self.add_star(self.newStar)
            
    def spawnSingleStar(self):
            self.vectorPosition = Vector(random.randrange(100, 750), random.randrange(50, 550))
            self.newStar = Star(self.vectorPosition)
            self.add_star(self.newStar) 
            
    def add_star(self, i):
        self.star_list.append(i)
        
    def spawn_clouds(self):
        for i in range(0, self.cloudLimit):
            self.vectorPosition = Vector(random.randrange(300, 700), random.randrange(100, 500))
            self.newCloud = Cloud(self.vectorPosition)
            self.add_cloud(self.newCloud)
     
    def add_cloud(self, i):
        self.cloud_list.append(i)
        
    def spawn_aliens(self):
        for i in range(0, self.alienLimit):
            self.vectorPosition = Vector(random.randrange(700, 750), random.randrange(100, 500))
            self.newAlien = Alien(self.vectorPosition)
            self.add_alien(self.newAlien)
     
    def add_alien(self, i):
        self.alien_list.append(i)
        
    def spawn_asteroids(self):
        for i in range(0, self.asteroidLimit):
            self.vectorPosition = Vector(random.randrange(0, 800), random.randrange(-100,0))
            self.newAsteroid = Asteroid(self.vectorPosition)
            self.add_asteroids(self.newAsteroid)
            
    def spawnsingle_asteroid(self):
        self.vectorPosition = Vector(random.randrange(0, 800), random.randrange(-100,0))
        self.newAsteroid = Asteroid(self.vectorPosition)
        self.add_asteroids(self.newAsteroid)
            
    def add_asteroids(self, i):
        self.asteroid_list.append(i)
        
    def starRemover(self, i):
        for k in self.star_list:
            if k == i:
                self.star_list.remove(k)
    
    def initalspawn(self):        
        self.spawn_planets()
        self.spawn_clouds()
        self.spawn_aliens()
        self.spawn_asteroids()
        self.spawn_stars()
    def update(self):
        for alien in self.alien_list:
            alien.update()
        for cloud in self.cloud_list:
            cloud.update()
        for asteroid in self.asteroid_list:
            asteroid.update()
            #if asteroid.pos.y > 620:
            #    self.asteroid_list.remove(asteroid)
            #    self.spawnsingle_asteroid()  
            if asteroid.pos.x > 820 or asteroid.pos.x < 0 or asteroid.pos.y > 620:
                self.asteroid_list.remove(asteroid)
                self.spawnsingle_asteroid()
            #if asteroid.pos.x < 0:
            #    self.asteroid_list.remove(asteroid)
            #    self.spawnsingle_asteroid()
                
    def draw(self, canvas):
        if self.spawnobjects == False:
            self.initalspawn()
            self.spawnobjects = True
        for planet in self.planets_list:
            planet.draw(canvas)
        for star in self.star_list:
            star.draw(canvas)
        for cloud in self.cloud_list:
            cloud.draw(canvas)
        for alien in self.alien_list:
            alien.draw(canvas)
        for asteroid in self.asteroid_list:
            asteroid.draw(canvas)
        self.update()
        
class Interaction:
    def __init__(self,kbd):
        self.kbd = kbd
        self.moon = Moon(Vector((WIDTH-745), (HEIGHT-530)))
        self.background_img = simplegui.load_image("https://i.imgur.com/xOaLyeq.png") #("https://i.imgur.com/j4yZLIh.png") - Old Background
        self.gameover = simplegui.load_image("https://i.imgur.com/LR3Weyg.png")
        self.obstacle = ObstacleHandler()
        self.START = False
        self.score = 0
        self.level = 1
        self.lives = 100
        self.wall = Wall(20, 800, 5, 'Red')
        self.hitStar = simplegui.load_sound('https://assets.mixkit.co/sfx/preview/mixkit-game-click-1114.mp3')
        self.endSound = simplegui.load_sound('https://assets.mixkit.co/sfx/preview/mixkit-little-piano-game-over-1944.mp3')
        self.introSound = simplegui.load_sound('https://assets.mixkit.co/sfx/preview/mixkit-cinematic-transition-brass-hum-2282.mp3')
        self.welcomeScreen = True
        self.restartbool = False
        self.scorearray = [0,0,0]
        
    def update(self):
        if self.START == True:
            self.keyboardinp()
            self.moon.gravity = 1
            self.count = 0
            for i in self.obstacle.planets_list:
                if self.hit(self.moon, i):
                    self.lives -= 0.5
            for i in self.obstacle.cloud_list:
                if self.hit(self.moon, i):
                    self.lives -= 0.5
                i.increaseDifficulty(self.level)
            for i in self.obstacle.alien_list:
                if self.hit(self.moon, i):
                    self.lives -= 0.5
                i.increaseDifficulty(self.level)
            for i in self.obstacle.asteroid_list:
                if self.hit(self.moon, i):
                    self.lives -= 0.5
                #self.obstacle.spawnsingle_asteroid()
            for i in self.obstacle.star_list:
                count = 0
                if self.hit(self.moon, i):
                    self.hitStar.play()
                    self.hitStar.set_volume(0.3)
                    self.score += 1
                    self.obstacle.starRemover(i)
                    self.obstacle.spawnSingleStar()
                    if self.score % 5 == 0: #change level difficulty
                        self.level += 1
                        self.lives += 20
            if self.lives <= 0:
                self.moon.ALIVE = False
            elif self.hit_wall(self.moon, self.wall):
                self.moon.ALIVE = False
            
    def introScreen(self, canvas):
        self.intro = simplegui.load_image('https://i.imgur.com/DOKJ3eO.png')
        if self.kbd.m == False:
            self.introSound.play()
            self.introSound.set_volume(0.015)
            canvas.draw_image(self.intro, (1144/2, 719/2), (1144, 719), (400, 300), (850, 650))
                
    def hit(self, b1, b2):
        sep_vec = b1.pos.copy().subtract(b2.pos)
        return sep_vec.length() < b1.radius + b2.radius
        #offset1 = b1.pos + b1.radius
        #return b1.pos + b1.radius >= b2.pos+b2.radius or b1.pos + b1.radius <= b2.pos-b2.radius
        
    def hit_wall(self, m1, wall):
         return m1.offset_d() >= self.wall.edge
    
    def startgame(self):
        if self.kbd.space == True:
            self.START = True 
            
    
    def tick(self):
        for i in self.obstacle.star_list:
            i.pos = Vector(random.randrange(170, 600), random.randrange(100, 500))
         
    def keyboardinp(self):
        if self.kbd.right:
            self.moon.vel.add(Vector(1, 0))
        if self.kbd.left:
            self.moon.vel.add(Vector(-1, 0))
        if self.kbd.up:
            self.moon.vel.add(Vector(0, (-3.5)))
                  
    def Maingame(self, canvas):
        canvas.draw_image(self.background_img, (1564/2, 1123/2), (1564, 1123), (400, 300), (900, 700))
        self.restartbool = False
        self.startgame()
        self.obstacle.draw(canvas) # if statement for when game is started
        self.update()
        self.moon.update()
        self.moon.draw(canvas)
        self.wall.draw(canvas)
        canvas.draw_text("START", (10, 25), 25, 'White', 'sans-serif')
        canvas.draw_text("Stars: %s" % self.score, (680, 25), 23, 'Yellow', 'sans-serif')
        canvas.draw_text("Level: %s" % self.level, (680, 50), 20, 'White', 'sans-serif')
        canvas.draw_text("Health: %s" % self.lives, (680, 75), 20, 'LightGreen', 'sans-serif')
        if self.lives <= 0:
            self.reset(canvas)
        #welcome
        #main game loop
        #gameover + restart
        
    def reset(self,canvas):
        self.endSound.play()
        self.endSound.set_volume(0.2)
        self.scorearray.append(self.score)
        self.scorearray.sort(reverse = True) ### highest ot lowest 
        canvas.draw_image(self.gameover, (1144/2, 719/2), (1144, 719), (400, 300), (850, 650))
        canvas.draw_text("Total Stars: %s" % self.score, (350, 470), 20, 'White', 'sans-serif')
        canvas.draw_text("Top Scores: %s" % self.scorearray[0], (350, 490), 20, 'White', 'sans-serif')
        if self.scorearray[1] != 0:
            canvas.draw_text("2nd %s" % self.scorearray[1], (350, 510), 20, 'White', 'sans-serif')
        if self.scorearray[2] != 0:
            canvas.draw_text("3rd %s" % self.scorearray[2], (350, 530), 20, 'White', 'sans-serif')
        #canvas.draw_image(self.gameover, (1144/2, 719/2), (1144, 719), (400, 300), (850, 650))
        if self.kbd.r == True:
            self.restartbool = True
        if self.restartbool == True:
            self.lives = 100
            self.level = 1
            self.score = 0
            self.moon = Moon(Vector((WIDTH-745), (HEIGHT-530)))
            self.START = False
            self.moon.ALIVE = True
    def draw(self,canvas):
        #self.gameoverscreen = canvas.draw_image(self.gameover, (1144/2, 719/2), (1144, 719), (400, 300), (850, 650))
        if self.moon.ALIVE == True:
            self.Maingame(canvas)
            self.introScreen(canvas)
        elif self.moon.ALIVE == False:
            #self.scorearray.append(self.score)
            #self.gameoverscreen
            #if self.kbd.r == True:
            self.reset(canvas)

#MOON 2 = https://i.imgur.com/TYO0N2J.jpg - for when you crash into obstacles
#canvas.draw_image('https://i.imgur.com/TYO0N2J.jpg', (196/2, 195/2), (196, 195), (x, y), (100, 100))
#MOON 3 = https://i.imgur.com/hOFOsDk.jpg - for when you hit a star

frame = simplegui.create_frame('HOPPY MOON', WIDTH, HEIGHT)
label1 = frame.add_label('WECLOME TO HOPPY MOON!')
label2 = frame.add_label('', 400)
label3 = frame.add_label('Instructions:')
label4 = frame.add_label('1. Use arrow keys to move.')
label5 = frame.add_label('2. Avoid the obstacles - they ruin your health!')
label6 = frame.add_label('3. Collect stars for points - you get 20 points for every 5 stars you collect.', 200)
label7 = frame.add_label('4. Click spacebar to start moving the moon.')

interval = 5000
kbd = Keyboard()
interaction = Interaction(kbd)

timer = simplegui.create_timer(interval, interaction.tick)
frame.set_draw_handler(interaction.draw)
frame.set_keydown_handler(kbd.keyDown)
frame.set_keyup_handler(kbd.keyUp)
frame.start()
timer.start()
